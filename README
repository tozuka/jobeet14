g====
J 01
====
$ ./lib/vendor/symfony/data/bin/symfony generate:project jobeet
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ // dorénavant on peut utiliser le raccourci "symfony"

$ ./symfony generate:app frontend



====
J 02
====
je n'écrit rien


====
J 03
====
$ ## ./symfony doctrine:build-schema でSQLがでる

$ mysqladmin -uroot -proot create jobeet14
$ ./symfony configure:database "mysql:host=localhost;dbname=jobeet14" root root


$ ./symfony doctrine:build --model ==> data/model/..
$ ./symfony doctrine:build --sql   ==> data/sql/..
$ ./symfony doctrine:insert-sql

lib/model/doctrine/base/BaseFoo.class  << sfDoctrineRecord (これはいじらない)
lib/model/doctrine/Foo.class           << base/BaseFoo.class (カスタマイズはこちら)
lib/model/doctrine/FooTable.class      << Doctrine_Table

$ ./symfony doctrine:build --all                     でフォーム、バリデータまで一発生成
$ ./symfony doctrine:build --all --no-confirmation

フィクスチャをロード:

$ ./symfony doctrine:data-load
$ ./symfony doctrine:build --all --and-load

CRUDモジュールを作るわよ

$ ./symfony doctrine:generate-module --with-show --non-verbose-templates frontend job JobeetJob

====
J 04
====

====
J 05 Routing
====
apps/frontend/config/routing.yml

> job_show_user:
>   url:   /job/:company/:location/:id/:position
>   class: sfRequestRoute
>   param: { module: job, action: show }
>   requirements:
>     id: \d+
>     sf_method: [get]

Doctrineオブジェクトを使うと簡単:

> job_show_user:
>   url:     /job/:company/:location/:id/:position
>   class:   sfDoctrineRoute
>   options: { model: JobeetJob, type: object }
>   param:   { module: job, action: show }
>   requirements:
>     id: \d+
>     sf_method: [get]

そうすると
 url_for(array('sf_route' => 'job_show_user', 'sf_subject' => $job))
とか
 url_for('job_show_user', $job)
とか書けて非常に楽ちん

$ ./symfony app:routes frontend
$ ./symfony app:routes frontend job_edit

// lib/Jobeet.class.php って何さ
// ... in lib/model/doctrine/JobeetJob.class.php,
// return Jobeet::slugify(...)
// あー。これか


====
J 06
====
data/fixtures/????.yml など、フィクスチャを追加したりとかしたら

$ ./symfony doctrine:data-load

====
J 07
====

$ ./symfony doctrine:generate-module --with-show --non-verbose-templates frontend category JobeetJob

よりも

$ ./symfony generate:module frontend category

のほうが良いケース。空のモジュールを作る。

$ ./symfony doctrine:build --all --and-load --no-confirmation


====
J 08 Testing
====
require_once dirname(__FILE__).'/../bootstrap/unit.php';
$t = new lime_test(6);
...

$ php test/unit/JobeetTest.php
あるいは
$ ./symfony test:unit Jobeet


カバレッジ
$ ./symfony test:coverage test/unit/JobeetTest.php lib/Jobeet.class.php
$ ./symfony test:coverage --detailed test/unit/JobeetTest.php lib/Jobeet.class.php


$ mysqladmin -uroot -p????? create jobeet_test
$ ./symfony doctrine:insert-sql --env=test
                                ^^^^^^^^^^

Doctrine_Core::loadData(sfConfig::get('sf_test_dir').'/fixtures');
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        プロジェクトのフルパス